# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
{% for host in kafka_host_list %}
{%- if host == inventory_hostname -%}broker.id={{ loop.index }}{%- endif -%}
{% endfor %}

{% if kafka_inter_broker_protocol_version is defined and kafka_inter_broker_protocol_version %}
# Specify which version of the inter-broker protocol will be used. This is 
# typically bumped after all brokers were upgraded to a new version. Example 
# of some valid values are: 0.8.0, 0.8.1, 0.8.1.1, 0.8.2, 0.8.2.0, 0.8.2.1, 
# 0.9.0.0, 0.9.0.1, 0.10.1. Check ApiVersion for the full list.
inter.broker.protocol.version={{ kafka_inter_broker_protocol_version }}
{% endif %}

{% if kafka_log_message_format_version is defined and kafka_log_message_format_version %}
# Specify the message format version the broker will use to append messages to the 
# logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 
# 0.10.0, 0.10.1, check ApiVersion for more details. By setting a particular message format 
# version, the user is certifying that all the existing messages on disk are smaller 
# or equal than the specified version. Setting this value incorrectly will cause 
# consumers with older versions to break as they will receive messages with a format 
# that they don't understand.
log.message.format.version={{ kafka_log_message_format_version }}
{% endif %}

# The maximum message size the broker can receive
message.max.bytes={{ kafka_message_max|default(1000012) }}

# Switch to enable topic deletion or not, default value is false
delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = security_protocol://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://{{ inventory_hostname }}:{{ kafka_port|default(9092) }}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=PLAINTEXT://{{ inventory_hostname }}:{{ kafka_port|default(9092) }}

# The number of threads handling network requests
num.network.threads={{ kafka_num_network_threads|default(3) }}

# The number of threads doing disk I/O
num.io.threads={{ kafka_num_io_threads|default(8) }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={% for dir in kafka_data_log_dir %}{{dir}},{% endfor %}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka_num_partitions|default(1) }}

# Default replication factors for automatically created topics
default.replication.factor={{ kafka_replication_factor|default(1) }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

# Number of fetcher threads used to replicate messages from a source broker. Increasing this 
# value can increase the degree of I/O parallelism in the follower broker.
num.replica.fetchers={{ kafka_num_replica_fetchers|default(1) }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ kafka_log_retention_hours|default(168) }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={% for host in zookeeper_host_list %}{{ host }}:{{ zookeeper_client_port|default(2181) }}{% if not loop.last %},{% endif %}{% endfor %}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ kafka_zookeeper_connection_timeout|default(6000) }}
